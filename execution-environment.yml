---
version: 1

build_arg_defaults:
  EE_BASE_IMAGE: registry.redhat.io/ansible-automation-platform-23/ee-minimal-rhel8:1.0.0-260
  EE_BUILDER_IMAGE: registry.redhat.io/ansible-automation-platform-23/ansible-builder-rhel8:1.2.0-16

ansible_config: "ansible.cfg"

dependencies:
  galaxy: requirements.yml
  python: requirements.txt

additional_build_steps:
  prepend: |
    # Enable Repo Manager
    RUN microdnf install -y yum-utils

    # Configure Terraform Repo
    RUN dnf config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo

    # Configure Azure CLI Repo
    RUN rpm --import https://packages.microsoft.com/keys/microsoft.asc
    RUN dnf install -y https://packages.microsoft.com/config/rhel/8/packages-microsoft-prod.rpm
    RUN echo -e "[azure-cli]\nname=Azure CLI\nbaseurl=https://packages.microsoft.com/yumrepos/azure-cli\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" | tee /etc/yum.repos.d/azure-cli.repo

    # Configure GCloud Repo
    RUN echo -e "[google-cloud-cli]\nname=Google Cloud CLI\nbaseurl=https://packages.cloud.google.com/yum/repos/cloud-sdk-el8-x86_64\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=0\ngpgkey=https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg" | tee /etc/yum.repos.d/google-cloud-sdk.repo

    # Install required repos
    RUN dnf install -y unzip azure-cli google-cloud-cli terraform

    # Install the Azure Connected Machine Extension
    RUN az config set extension.use_dynamic_install=yes_without_prompt
    RUN az extension add --name connectedmachine -y
    
  append: |
    # Install AWS CLI
    # RUN if [ $TARGETARCH == "arm64" ]; then curl -L "https://awscli.amazonaws.com/awscli-exe-linux-aarch64-2.9.0.zip" -o "awscliv2.zip"; else curl -L "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.9.0.zip" -o "awscliv2.zip"; fi
    RUN curl -L "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    RUN unzip awscliv2.zip
    RUN ./aws/install
    RUN rm awscliv2.zip

    # Install OCI CLI
    RUN python3 -m venv oracle-cli
    ENV VIRTUAL_ENV /runner/oracle-cli
    RUN /runner/oracle-cli/bin/pip3 install oci-cli

    # Final Config
    ENV VIRTUAL_ENV ""
    RUN microdnf clean all  \
      && rm -rf /var/cache/{dnf,yum} \
      && rm -rf /var/lib/dnf/history.* \
      && rm -rf /var/log/*
